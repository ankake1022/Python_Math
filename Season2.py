#Pythonでは割り算で商のみが欲しいとき、
# 「//」で求めることができる

print(10//3)

#シフト演算
print(12 << 1) #左に1ビットシフト
print(12 << 2) #左に2ビットシフト
#左シフトの場合は空いた桁(下位のビット)には0を挿入し、
#溢れた桁は無視する
#「12 << 1」の場合は
#「0b00001100」から
#「0b00011000」となる ＝ 2倍

print(12 >> 1) #右に1ビットシフト
print(12 >> 2) #右に2ビットシフト
#右シフトでは空いた桁(上位のビット)に「0か1」を挿入する。
#そのため右シフトには「論理」と「算術」の二つがある
#論理右シフト・・・空いた桁に0を挿入する方法
#算術右シフト・・・空いた桁に符号ビットと同じ値を挿入する方法
#                符号に重要な意味がある場合に使う
#Pythonでは自動で判別してくれる?

#ビット演算(論理演算子ではない)
1 & 1 #AND演算
1 | 1 #OR演算
1 ^ 1 #XOR演算
~1    #NOT演算

print(170 & 15)
#「0b10101010」と「0b00001111」のAND演算のため
#「0b00001010」= 「10」となる

#NOT演算を応用して2の補数を求めることも可能
print(~10 + 1)

#色の成分を取り出す
#関数を作る
def get_pixel_color(c):
    r = (c & 0x00FF0000) >> 16
    g = (c & 0x0000FF00) >> 8
    b = (c & 0x000000FF)
    return r, g, b

c = 4287090426 #p70参考
r, g, b = get_pixel_color(c)
print(r, g, b)










